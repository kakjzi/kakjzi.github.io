{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"안녕하세요!👋🏻 지금까지 AWS의 EC2에 Attach되어 있는 IP 주소에 대해서는 과금하지 않았는데, 2024년 2월 1일부터 AWS Public IPv4 주소 사용이 시간당 0.005 USD 과금됩니다. 또한, 신규 AWS 프리티어 고객인 경우 매달 750시간의 Public IP 주소를 무료로 사용할 수 있습니다. AWS는 Public IP Insig…","fields":{"slug":"/cost2/"},"frontmatter":{"date":"February 13, 2024","title":"[AWS] Public IP 과금 소식","tags":["AWS","Cost"]},"rawMarkdownBody":"\n안녕하세요!👋🏻\n\n지금까지 AWS의 EC2에 Attach되어 있는 IP 주소에 대해서는 과금하지 않았는데, **2024년 2월 1일**부터 AWS Public IPv4 주소 사용이 시간당 0.005 USD 과금됩니다.\n\n또한, 신규 AWS 프리티어 고객인 경우 매달 750시간의 Public IP 주소를 무료로 사용할 수 있습니다. AWS는 Public IP Insights라는 새로운 기능을 통해 고객이 자신의 Public IPv4 주소 사용 현황을 모니터링하고 최적화할 수 있도록 지원합니다. 이를 통해 불필요한 비용을 줄이고 IPv4 주소 사용을 효율적으로 관리할 수 있습니다.\n\n## 실제 사례\n\n![청구서 내역](./publicIp_cost.png)\n\n- PublicIPv4:IdleAddress: AWS 계정에서 유휴 상태 인 모든 퍼블릭 IPv4 주소의 사용량을 보여줍니다.\n- PublicIPv4:InUseAddress: AWS 리소스에서 사용 중인 모든 퍼블릭 IPv4 주소의 사용량을 보여줍니다. 여기에는 EC2 퍼블릭 IPv4 주소, 탄력적 IP 주소 및 서비스 관리형 퍼블릭 IPv4 주소가 포함됩니다. BYOIP 주소 사용에 대한 비용이 없기 때문에 BYOIP는 포함되지 않습니다.\n\n실제로 비용청구되는 것을 해석해보면,\n\n'Idle' Public IPv4 주소의 경우, 시간당 $0.005의 비용이 부과됩니다. 총 58.092시간 동안 'Idle' 상태였으므로, 이에 대한 총 비용은 USD 0.29입니다.\n\n'In-use' Public IPv4 주소는 시간당 $0.005의 비용이 부과되며, 총 5.807시간 동안 사용되어 총 비용은 USD 0.03입니다.\n\n그리고 시간이 딱 떨어지지 않는 것으로 보아 Public IPv4 주소의 과금이 시간당이 아니라 분 단위로 이루어진다는 것을 알 수 있습니다.\n이는 AWS가 Public IPv4 주소 사용에 대해 더 세밀한 과금 체계를 적용하고 있음을 의미합니다.\n\n## Public IP 에 대해 추적하고 편리하게 관리하기 위한 명령어\n\npublic IP에 대해 좀 더 쉽게(?) 관리할 수 있는 명령어들을 공유드립니다.\n\n명령어는 아래의 목적을 차례대로 갖고 있습니다.\n\n1.  VPC 내에서 사용되지 않고 있는(즉, 어떤 인스턴스에도 연결되지 않은) Elastic IP 주소를 조회\n2.  네트워크 인터페이스의 정보를 조회하여 공용 IP 주소가 연결된 인터페이스를 필터링\n\n\n### window\n\n```bash\n# VPC 내에서 사용되지 않고 있는(즉, 어떤 인스턴스에도 연결되지 않은) Elastic IP 주소를 조회\naws ec2 describe-addresses --region=[리전정보] --filters \"Name=domain,Values=vpc\" | ConvertFrom-Json | ForEach-Object { $.Addresses } | Where-Object { $null -eq $.AssociationId } | Select-Object PublicIp, AllocationId, @{Name='Region'; Expression={$_.NetworkBorderGroup}}, @{Name='Status'; Expression={'미사용'}}, NetworkInterfaceId\n\n# 네트워크 인터페이스의 정보를 조회하여 공용 IP 주소가 연결된 인터페이스를 필터링\naws ec2 describe-network-interfaces --region=[리전정보] | ConvertFrom-Json | % { $.NetworkInterfaces } | Where-Object { $.Association } | Select-Object @{Name='PublicIp'; Expression={$.Association.PublicIp}}, @{Name='Region'; Expression={$.AvailabilityZone}}, @{Name='Status'; Expression={if ($.Status -eq 'in-use') {'사용'} else {'미사용'}}}, @{Name='AllocationId'; Expression={$.Association.AllocationId}}, NetworkInterfaceId\n```\n\n### mac\n\n사전 준비 : `brew install jq`\n\n```bash\n# VPC 내에서 사용되지 않고 있는(즉, 어떤 인스턴스에도 연결되지 않은) Elastic IP 주소를 조회\naws ec2 describe-addresses --region=[리전정보] --filters \"Name=domain,Values=vpc\" | jq '.Addresses | map(select(.AssociationId == null)) | .[] | {PublicIp: .PublicIp, AllocationId: .AllocationId, Region: .NetworkBorderGroup, Status: \"미사용\", NetworkInterfaceId: .NetworkInterfaceId}'\n\n\n# 네트워크 인터페이스의 정보를 조회하여 공용 IP 주소가 연결된 인터페이스를 필터링\naws ec2 describe-network-interfaces --region=[리전정보] | jq '.NetworkInterfaces | map(select(.Association != null)) | .[] | {PublicIp: .Association.PublicIp, Region: .AvailabilityZone, Status: if .Status == \"in-use\" then \"사용\" else \"미사용\", AllocationId: .Association.AllocationId, NetworkInterfaceId: .NetworkInterfaceId}'\n```\n\n<br/>\n\n> 참고사이트\n>\n> 1. [Public IP](https://aws.amazon.com/ko/blogs/korea/new-aws-public-ipv4-address-charge-public-ip-insights/)\n> 2. [Public IP 프리티어](https://aws.amazon.com/ko/about-aws/whats-new/2024/02/aws-free-tier-750-hours-free-public-ipv4-addresses/)\n> 3. [Public IP Optimizer](https://aws.amazon.com/ko/blogs/networking-and-content-delivery/identify-and-optimize-public-ipv4-address-usage-on-aws/)\n"},{"excerpt":"안녕하세요!👋🏻 클라우드 컴퓨팅이 우리 개발 생활에 깊숙이 자리 잡은 요즘, AWS는 마치 필수 요소처럼 여겨지곤 합니다. 서버부터 함수 하나까지, AWS는 우리가 필요로 하는 거의 모든 것을 제공하는데요. 그 중에서도 특히 EC2와 Lambda는 많은 개발자들 사이에서 끊임없는 비교의 대상이 되어왔습니다. EC2(Elastic Compute Cloud)는…","fields":{"slug":"/cost1/"},"frontmatter":{"date":"February 09, 2024","title":"[AWS] 비용 비교: Lambda vs. EC2","tags":["AWS","Cost"]},"rawMarkdownBody":"\n안녕하세요!👋🏻\n\n클라우드 컴퓨팅이 우리 개발 생활에 깊숙이 자리 잡은 요즘, AWS는 마치 필수 요소처럼 여겨지곤 합니다.\n\n서버부터 함수 하나까지, AWS는 우리가 필요로 하는 거의 모든 것을 제공하는데요. 그 중에서도 특히 EC2와 Lambda는 많은 개발자들 사이에서 끊임없는 비교의 대상이 되어왔습니다.\n\n**EC2**(Elastic Compute Cloud)는 가상 서버를 제공하여, 사용자가 원하는 대로 운영체제를 선택하고, 애플리케이션을 설치하며, 네트워크 구성을 조정할 수 있는 유연성을 제공합니다. 마치 자유도 높은 놀이터와 같아서 원하는 대로 서버를 구성하고 조정할 수 있지만, 관리해야 할 것도 많습니다.\n반면, **Lambda**는 서버리스 컴퓨팅 서비스로, 마치 요리사가 모든 준비를 미리 해놓은 상태에서 우리는 할 요리만 하는 것처럼, 서버 걱정 없이 코드 실행에만 집중할 수 있게 해줍니다.\n\n이번 글에서는 이 두 서비스의 비용 면에서 어떤 차이점이 있는지, 각각의 서비스가 어떤 상황에서 더 경제적일 수 있는지에 대해 살펴보겠습니다.\n\n## 비용모델\n\nEC2의 경우 온디맨드 인스턴스를 사용하면 장기 약정 없이 컴퓨팅 파워에 대해 <u>시간당 또는 초당(최소 60초) 비용을 지불</u>하게 됩니다. 즉 서버를 사용한 만큼 과금하는 비용모델입니다. EC2 인스턴스는 지속적으로 실행되므로, 높은 CPU 사용량과 같이 안정적이고 예측 가능한 성능이 요구되는 경우 더 경제적일 수 있습니다. 또한, EC2는 예약 인스턴스나 스팟 인스턴스와 같은 다양한 가격 모델을 제공하여 장기적으로 비용을 절감할 수 있는 기회를 제공합니다.\n\nLambda는 <u>1) 실행된 함수의 수와 2) 실행 시간, 3) 메모리 할당량</u>(메모리 할당량은 GB-초 계산에 반영됩니다)에 따라 비용이 결정됩니다. 이는 높은 트래픽이 예측되지 않거나 간헐적인 워크로드에 매우 이상적입니다. 예를 들어, 단기적인 배치 작업이나 API 요청 처리와 같은 작업에서 Lambda를 사용하면 EC2 인스턴스를 24/7 운영하는 것에 비해 비용을 크게 절감할 수 있습니다.\n\n## 사용 예시\n\n실제 비용 예시를 통해 Lambda와 EC2의 비용 차이를 구체적으로 살펴보겠습니다. (프리티어 논외)\n\n### Lambda의 경우,\n\n비용은 함수 실행 횟수, 실행 시간 및 할당된 메모리에 따라 달라집니다.\n\n> 서울리전) x86 아키텍처와 1GB 메모리를 할당받아 매월 2,592,000건의 요청을 처리하고, 함수 실행 시간이 100ms일 때\n\n- GB-초당 0.0000166667 USD\n- 요청 1백만 건당 0.20 USD\n\n###### 월별 컴퓨팅 요금\n\n- 컴퓨팅(초) = 한달에 86,400초 \\* 30일 = 2,592,000초 \\* 0.1초 = 259,200 초\n- 컴퓨팅(GB-s) = 259,200 초 \\* 1GB = 259,200GB-초\n- 월별 컴퓨팅 요금 = 259,200GB-초 \\* 0.0000166667 USD/GB-초 = 4.32 USD\n\n###### 월별 요청 요금\n\n- 월별 요청 요금 = 2,592,000건 \\* 0.2 USD/백만건 = 518.4 USD\n\n###### 총 월별 요금\n\n- 총 요금 = 월별 컴퓨팅 요금 + 월별 요청 요금 = 4.32 + 518.40 = $522.72 USD\n\n### EC2 인스턴스의 경우,\n\n지속적으로 실행되는 가상 서버에 대한 비용을 지불합니다.\n\n> 버지니아 북부) t2.micro 인스턴스를 한 달(30일) 동안 24시간 계속해서 운영한다고 가정한경우\n\n- 시간당 0.0116 USD\n\n###### 월별 컴퓨팅 요금\n\n- 0.0116 USD \\* 24시간 \\* 30일 = 월별 8.35 USD 의 비용이 발생합니다.\n\n위 예시에서 볼 수 있듯이, Lambda는 실행 횟수와 실행 시간이 적은 경우 매우 저렴할 수 있지만, 실행 횟수가 많아지고 실행 시간이 길어질수록 비용이 증가합니다. 그러니 간편한 작업이나 간헐적인 워크로드에 적합합니다. 반면, EC2는 지속적인 운영이 필요한 경우에 비용 효율적일 수 있으며, 특히 예약 인스턴스나 스팟 인스턴스를 활용할 경우 비용을 더 절감할 수 있습니다.\n\n### 결론\n\n어떤 서비스를 선택하든, AWS의 다양한 서비스와 가격 모델을 활용하여 최적의 비용 효율을 달성할 수 있습니다. 이를 위해 [AWS 요금 계산기](https://calculator.aws/#/)를 활용하여 자신의 사용 사례에 맞게 비용을 예측하고 계획하는 것이 좋습니다.\n\n> 참고사이트\n>\n> 1.  https://aws.amazon.com/ko/lambda/pricing/\n> 2.  https://aws.amazon.com/ko/ec2/pricing/on-demand/\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}